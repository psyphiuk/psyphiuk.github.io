@use "../theme" as *;

$justify-content: (
  start: start, 
  center: center, 
  end: end, 
  between: space-between, 
  around: space-around, 
  evenly: space-evenly,
  stretch: stretch,
);

@each $name, $value in $justify-content {
  .jc-#{$name}, .jc-flex-#{$name}, .jc-grid-#{$name} {
    justify-content: $value;
  }
}

$justify-items: (
  stretch: stretch,
  start: start,
  center: center,
  end: end,
  baseline: baseline,
);

@each $name, $value in $justify-items {
  .ji-#{$name}, .ji-flex-#{$name}, .ji-grid-#{$name} {
    justify-items: $value;
  }
}

$justify-self: (
  auto: auto,
  stretch: stretch,
  start: start,
  center: center,
  end: end,
  baseline: baseline,
);

@each $name, $value in $justify-self {
  .js-#{$name}, .js-flex-#{$name}, .js-grid-#{$name} {
    justify-items: $value;
  }
}

@each $name, $value in $justify-self {
  .cjs-#{$name}, .cjs-flex-#{$name}, .cjs-grid-#{$name} {
    > * {
      justify-items: $value;
    }
  }
}

$align-content: (
  start: start, 
  center: center, 
  end: end, 
  baseline: baseline,
  between: space-between, 
  around: space-around, 
  evenly: space-evenly,
  stretch: stretch,
);

@each $name, $value in $align-content {
  .ac-#{$name}, .ac-flex-#{$name}, .ac-grid-#{$name} {
    align-content: $value;
  }
}

$align-items: (
  stretch: stretch,
  start: start,
  center: center,
  end: end,
  baseline: baseline,
);

@each $name, $value in $align-items {
  .ai-#{$name}, .ai-flex-#{$name}, .ai-grid-#{$name} {
    align-items: $value;
  }
}

$align-self: (
  auto: auto,
  stretch: stretch,
  start: start,
  center: center,
  end: end,
  baseline: baseline,
);

@each $name, $value in $align-self {
  .as-#{$name}, .as-flex-#{$name}, .as-grid-#{$name} {
    align-items: $value;
  }
}

@each $aname, $avalue in $align-content {
  @each $jname, $jvalue in $justify-content {
    .pc-#{$aname}-#{$jname},
    .pc-flex-#{$aname}-#{$jname},
    .pc-grid-#{$aname}-#{$jname} {
      place-content: $avalue $jvalue;
    }
  }
}

@each $aname, $avalue in $align-items {
  @each $jname, $jvalue in $justify-items {
    .pi-#{$aname}-#{$jname},
    .pi-flex-#{$aname}-#{$jname},
    .pi-grid-#{$aname}-#{$jname} {
      place-items: $avalue $jvalue;
    }
  }
}

@each $aname, $avalue in $align-self {
  @each $jname, $jvalue in $justify-self {
    .ps-#{$aname}-#{$jname},
    .ps-flex-#{$aname}-#{$jname},
    .ps-grid-#{$aname}-#{$jname} {
      place-self: $avalue $jvalue;
    }
  }
}

@each $aname, $avalue in $align-self {
  @each $jname, $jvalue in $justify-self {
    .cps-#{$aname}-#{$jname},
    .cps-flex-#{$aname}-#{$jname},
    .cps-grid-#{$aname}-#{$jname} {
      > * {
        place-self: $avalue $jvalue;
      }
    }
  }
}

[class*="grid"] {
  display: grid;
}

.gap, .grid-gap, .flex-gap {
  gap: $padding;
}

.grid-even-columns {
  grid-template-columns: repeat(auto-fit, minmax(min(100%, $grid-min-size), 1fr));
}

.grid-auto-columns {
  grid-auto-flow: column;
  grid-auto-columns: 1fr;
}

.grid-stack {
  grid-template-areas: "stack";
  > * {
    grid-area: stack;
  }
}

// .flex {
//   display: flex;
//   flex-wrap: wrap;
//   > * {
//     flex: 1 0 var(--min-column-size);
//   }
// }

[class*="flex"] {
  display: flex;
}

.flex-columns {
  flex-wrap: wrap;
  > * {
    flex: 1 0 calc(calc($flex-min-size - 100%) * 999);
  }
}

.card {
  padding: $padding / 2;
  border-radius: 8px;
  border: $divider-size solid $divider-color;
  box-shadow: $boxshadow;
}

@mixin golden-grid {
  display: grid;
  @include on-desktop {
    grid-template-columns: $golden-ratio-left +fr $golden-ratio + fr;
  }
}

.golden-grid {
  height: 100vh;
  display: grid;
  grid-template-columns: $golden-ratio + fr 1fr;
  > div {
    background-color: $primary;
    flex-grow: 1;
  }
  :nth-child(2) {
    background-color: adjust-color($primary, $lightness: 10%);
  }
}